buildscript {
    repositories {
        maven {
            name 'MixinGradle'
            url 'https://repo.spongepowered.org/repository/maven-public'
        }
    }
    dependencies {
        if (project.use_mixins.toBoolean()) {
            classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        }
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'wtf.gofancy.fancygradle' version '1.1.+'
}

configurations {
    gitDependencies {
        exclude group: 'curse.maven', module: 'AdvancedRocketry-236542'
        exclude group: 'curse.maven', module: 'Libvulpes-236541'
        exclude group: 'curse.maven', module: 'had-enough-items-557549'
    }
    implementation.extendsFrom(gitDependencies)
}

apply {
    plugin 'net.minecraftforge.gradle'
    plugin 'java'
    plugin 'idea'
}

fancyGradle {
    patches {
        resources
        coremods
        asm
        codeChickenLib
    }
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

minecraft {

    mappings channel: 'stable', version: '39-1.12'

    if (project.has_access_transformer.toBoolean()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file('run/client')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
                jvmArg '-Dmixin.debug=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }

        server {
            workingDirectory project.file('run/server')
            if (project.use_coremod.toBoolean()) {
                jvmArg '-Dfml.coreMods.load=' + coremod_plugin_class_name
            }
            if (project.use_mixins.toBoolean()) {
                jvmArg '-Dmixin.hotSwap=true'
                jvmArg '-Dmixin.checks.interfaces=true'
            }
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'MC_VERSION', '1.12.2'
        }
    }
}


repositories {
    maven {
        url = 'https://maven.cleanroommc.com'
    }
    maven {
        url = 'https://repo.spongepowered.org/maven'
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name 'jared maven'
        url 'https://maven.blamejared.com/'
        content {
            includeGroup "CraftTweaker2"
        }
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    implementation 'CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.679'
    implementation fg.deobf('curse.maven:ImmersiveEngineering-231951:2974106')
    implementation fg.deobf('curse.maven:ImmersivePetroleum-268250:3382321')

    //Mekanism
    implementation('curse.maven:Mekanism_api-268560:2835176')
    implementation('curse.maven:Mekanism-268560:2835175')

    //HEI/JEI
    compileOnly fg.deobf('mezz.jei:jei_1.12.2:4.16.1.302:api')
    runtimeOnly fg.deobf('mezz.jei:jei_1.12.2:4.16.1.302')
    //implementation fg.deobf('curse.maven:had-enough-items-557549:3862733')


    runtimeOnly 'curse.maven:Codechicken_Lib_1_8-242818:2779848'

    //runtimeOnly 'curse.maven:Ender_Core-231868:2972849'
    //runtimeOnly 'curse.maven:Ender_IO-64578:3328811'
    //runtimeOnly 'curse.maven:Gas_Conduits-309756:3328809'

    runtimeOnly 'curse.maven:Cofh_Core-69162:2920433'
    runtimeOnly 'curse.maven:Cofh_World-271384:2920434'
    runtimeOnly 'curse.maven:Redstone_Flux-270789:2920436'
    runtimeOnly 'curse.maven:Thermal_Expansion-69163:2926431'
    runtimeOnly 'curse.maven:Thermal_Foundation-222880:2926428'

    runtimeOnly 'curse.maven:Wawla-224712:2916368'
    runtimeOnly 'curse.maven:Hwyla-253449:2568751'


    if (project.use_mixins.toBoolean()) {
        compileOnly 'zone.rong:mixinbooter:5.0'
        runtimeOnly 'zone.rong:mixinbooter:5.0'
    }
}

git {
    def props = new Properties()
    new File("${project.projectDir}/gradle.properties").withInputStream { props.load(it) }

    gitDependencies 'https://github.com/Srdjan-V/TweakedLib.git', {
        name 'TweakedLib'
        commit "v${props.getProperty('tweaked_lib_version')}"
    }

    gitDependencies 'https://github.com/Srdjan-V/TweakedPetroleum.git', {
        name 'TweakedPetroleum'
        commit "v${props.getProperty('tweaked_petroleum_version')}"
    }

}

sourceSets {
    main {
        if (project.use_mixins.toBoolean()) {
            ext.refMap = 'mixins.' + archives_base_name + '.refmap.json'
        }

        java {
            srcDirs = ["src/main/java"]
        }

        resources {
            srcDirs = ["src/main/java", "src/main/resources"]
        }
    }

    test {
        java {
            srcDirs = ["src/test/java"]
        }
        resources {
            srcDirs = ["src/test/resources"]
        }
    }

    // at compile time, put resources in same directories as classes
    main.output.setResourcesDir(main.java.classesDirectory)
}


jar {
    manifest {
        // noinspection GroovyAssignabilityCheck
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == 'build'
            }
        }
        if (project.use_mixins.toBoolean()) {
            attribute_map['TweakClass'] = 'org.spongepowered.asm.launch.MixinTweaker'
        }
        attributes(attribute_map)
    }
}

jar.finalizedBy('reobfJar')


import org.apache.tools.ant.filters.ReplaceTokens

task filterTokens(type: Sync) {
    inputs.property 'version', version
    inputs.property 'tweaked_petroleum_version', tweaked_petroleum_version

    from sourceSets.main.java
    filter(ReplaceTokens, tokens: [VERSION: version.toString(), TWEAKEDPETROLEUMVERSION: tweaked_petroleum_version.toString()])
    into "$buildDir/src/$sourceSets.main.name/$sourceSets.main.java.name"
}

compileJava.source = filterTokens.outputs

/*compileJava {
    classpath = sourceSets.main.compileClasspath + configurations.gitDependencies
}*/

processResources {
    // required to allow file expansion later
    duplicatesStrategy = 'include'

    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

if (project.build_deobfJar.toBoolean()) {
    // Create deobf dev jars
    task deobfJar(type: Jar) {
        archiveClassifier.set("deobf")
        from sourceSets.main.output
    }
}

if (project.build_apiJar.toBoolean()) {
    // Create API library jar
    task apiZip(type: Jar) {
        archiveClassifier.set("api")
        from(sourceSets.main.java) {
            include "name/api/**"
        }
        from(sourceSets.main.output) {
            include "name/api/**"
        }
    }
}

if (project.build_sourceJar.toBoolean()) {
    // Create source jar
    task sourcesJar(type: Jar) {
        archiveClassifier.set("sources")
        from sourceSets.main.allJava
    }
}

artifacts {
    if (project.build_deobfJar.toBoolean()) {
        archives deobfJar
    }
    if (project.build_apiJar.toBoolean()) {
        archives apiZip
    }
    if (project.build_sourceJar.toBoolean()) {
        archives sourcesJar
    }
}

